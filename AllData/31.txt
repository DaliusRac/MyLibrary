Java srautas

	• Suprantamas kaip duomenų (baitų, simbolių) seka.
	• Įgalina operuoti srauto skaitymo / rašymo operacijomis
	nepriklausomai nuo konkretaus įrenginio.
	• Kiekvieną konkretaus tipo srautą atitinka konkrečios Java klasės 
	objektas.
	• java.io – pagrindinės srautų klasės.
	• java klasės paruoštos plėtimui.


Srautų tipai 

	• Baitų / simbolių srautai
	• Skaitymo / rašymo srautai
	• 4 bazinės klasės:
	• InputStream, OutputStream – operuoja baitais (byte tipas)
	• Reader, Writer – operuoja simboliais (char tipas), leidžia išvengti simbolių
	kodavimo / dekodavimo problemų
	• Galima operuoti simboliais virš baitų srauto
	
	
Baitų kopijavimo pavyzdys 

	import java.io.*;

	public class CopyBytesPP {
	
		public static void main(String[] args) throws IOException {
		
			InputStream in = new FileInputStream("orig.txt");
			
			OutputStream out = new FileOutputStream("copy.txt");
			
			for (int c; (c = in.read()) != -1;) {
			
				out.write(c);
			}
			
			in.close();
			
			out.close();
		}
	}


Specializuotos išvedimo klasės

	• Įgalina atlikti specializuotas išvestis, parūpina papildomą 
		funkcionalumą
	• ByteArrayOutputStream, FileOutputStream,
		FilterOutputStream, ObjectOutputStream,
		PipedOutputStream
	• BufferedWriter, CharArrayWriter,
		FilterWriter, OutputStreamWriter,
		PipedWriter, PrintWriter, String


Specializuotos įvedimo klasės 

	• Įgalina skaityti iš specializuotų šaltinių, parūpina papildomą 
		funkcionalumą
	• ByteArrayInputStream, FileInputStream,
		FilterInputStream, InputStream, ObjectInputStream,
		PipedInputStream, SequenceInputStream,
		StringBufferInputStream
	• BufferedReader, CharArrayReader,
		FilterReader, InputStreamReader,
		PipedReader, StringReader


Objekto serializacija: įrašymas 

	import java.io.*;

	public class SerialisationTest {
		public static void main(String[] args) throws IOException {
			FileOutputStream out = new FileOutputStream("objdata.ser");
			ObjectOutputStream s = new ObjectOutputStream(out);
			s.writeObject(new A(200));
			s.flush();
			s.close();
		}
	}
	
	class A implements Serializable {
		private int i;
		
		public A(int i) {
			this.i = i;
		}
		
		public int getI() {
			return i;
		}
		
		public void setI(int i) {
			this.i = i;
		}
	}


Objekto serializacija: nuskaitymas

	import java.io.*;
	
	public class SerialisationTest {
	
		public static void main(String[] args) throws IOException, ClassNotFoundException {
			FileInputStream in = new FileInputStream("objdata.ser");
			ObjectInputStream s = new ObjectInputStream(in);
			A a = (A) s.readObject();
			System.out.println(a.getI());
			s.close();
		}
	}
	class A implements Serializable {
		private int i;
		
		public A(int i) {
			this.i = i;
		}
		
		public int getI() {
			return i;
		}
		
		public void setI(int i) {
			this.i = i;
		}
	}


Serializacijos pritaikymas

	• Serializuojamas objektas turi implementuoti Serializable interfeisą
	• Daugelis standartinių klasių serializuojamos, bet kai kurios - ne (pvz., 
		Thread)
	• Klasės neserializuojamus laukus galima pažymėti raktažodžiu 
		transient
	• Klasė gali papildyti standartinius serializafijos veiksmus 
		parūpindama metodus writeObject, readObject


Kitos klasės

	• java.io.File – “apgaubia” failo vardą. Turi failų atributų tikrinimo, 
		sukūrimo / pašalinimo, katalogų peržiūros operacijas.
	• java.io.RandomAccessFile – tiesioginės skaitymo / rašymo kreipties 
		klasė. Leidžia skaitymo / rašymo / pozicionavimo operacijas. 


Skaitymas: FileInputStream 

	InputStream in = null;
	try {
		in = new FileInputStream("src/failas.txt");
		int raidesKodas;
		while ((raidesKodas = in.read()) > 0) {
			char raide = (char) raidesKodas;
			System.out.print(raide);
		}
	} catch (Exception e) {
		e.printStackTrace();
	} finally {
		if (in != null)
			in.close();
	}



Rašymas: FileOtputStream 

	char[] tekstas = { 'J', 'a', 'v', 'a' };
	OutputStream os = null;
	try {
		os = new FileOutputStream("src/failas.txt");
		for (int i = 0; i < tekstas.length; i++) {
			os.write(tekstas[i]);
		}
		os.flush();
	} catch (IOException e) {
		e.printStackTrace();
	} finally {
		if (os != null)
			os.close();
	}



Rašymas: FileWriter + BufferedWritter 

	import java.io.BufferedWriter;
	import java.io.FileWriter;
	import java.io.IOException;

	public class WriteToFile {
		private static final String FILENAME = "src/failas.txt";
		
		public static void main(String[] args) {
			try (BufferedWriter bw = new BufferedWriter(new FileWriter(FILENAME))) {
				String content = "This is the content to write into file\n";
				bw.write(content);
				System.out.println("Done");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}


Rašymas: FileWriter + BufferedWritter 

	import java.io.BufferedWriter;
	import java.io.File;
	import java.io.FileWriter;
	import java.io.IOException;

	public class WriteToFile {
		public static void main(String[] args) {
			try {
				String content = "This is the content to write into file";
				File file = new File("src/failas.txt");
				// if file doesnt exists, then create it
				if (!file.exists()) {
					file.createNewFile();
				}
				FileWriter fw = new FileWriter(file.getAbsoluteFile());
				BufferedWriter bw = new BufferedWriter(fw);
				bw.write(content);
				bw.close();
				System.out.println("Done");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}


Skaitymas: File 

	import java.io.BufferedReader;
	import java.io.File;
	import java.io.FileInputStream;
	import java.io.IOException;
	import java.io.InputStreamReader;
	
	public class FileTest {
	
		public static void main(String[] args) throws IOException {
		
			File failas = new File("src/failas.txt");
			
			readFile1(failas);
		}
		
		private static void readFile1(File fin) throws IOException {
			FileInputStream fis = new FileInputStream(fin);
			// Construct BufferedReader from InputStreamReader
			BufferedReader br = new BufferedReader(new InputStreamReader(fis));
			String line = null;
			while ((line = br.readLine()) != null) {
			System.out.println(line);
			}
			br.close();
		}
	}



Rašymas: PrintWriter 

	import java.io.BufferedWriter;
	import java.io.FileWriter;
	import java.io.IOException;
	import java.io.PrintWriter;
	
	public class FileTest {
	
		public static void main(String[] args) {
			try {
				FileWriter fw = new FileWriter("src/failas.txt", true);
				BufferedWriter bw = new BufferedWriter(fw);
				PrintWriter out = new PrintWriter(bw);
				out.println("the text");
				out.close();
			} catch (IOException e) {
				// ...
			}
		}
	}
